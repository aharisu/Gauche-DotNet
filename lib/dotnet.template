;;;
;;; dotnet.scm
;;;
;;; MIT License
;;; Copyright 2013 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

(define-module dotnet
  (use gauche.sequence)
  (export-all)
  )
(select-module dotnet)

;; Loads extension
(dynamic-load "gauche_dotnet")

(define-method object-hash ((obj <clr-object>))
  (clr-object-hash obj))

(define-method call-with-iterator ((obj <clr-object>) proc . opts)
  (let-keywords opts ([start #f])
    (clr-iteration obj proc (or start 0))))


(define-method object-apply ((obj <clr-object>) (target <pair>))
  (if (integer? (car target))
    (clr-get obj target)
    (clr-call obj target)))

(define-method object-apply ((obj <clr-object>) (target <pair>) value)
  (if (integer? (car target))
    (clr-set! obj target value)
    (clr-call obj target value)))

(define-method object-apply ((obj <clr-object>) (method <pair>) . args)
  (apply clr-call method obj args))

(define-method object-apply ((obj <clr-object>) (method <symbol>) . args)
  (apply clr-call method obj args))

(define-method object-apply ((obj <clr-object>) target)
  (clr-get obj target))

(define-method object-apply ((obj <clr-object>) target value)
  (clr-set! obj target value))


